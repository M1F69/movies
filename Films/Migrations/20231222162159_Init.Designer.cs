// <auto-generated />
using System;
using Films.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Films.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20231222162159_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "lo");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Films.Data.Entities.AuthorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<int>("BornDate")
                        .HasColumnType("integer")
                        .HasColumnName("author_type");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_name");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_year");

                    b.HasKey("Id");

                    b.ToTable("authors", "movie");
                });

            modelBuilder.Entity("Films.Data.Entities.BlobEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("blob_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("blob_created_at");

                    b.Property<uint>("LoId")
                        .HasColumnType("lo")
                        .HasColumnName("lo_id");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blob_mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blob_name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("blob_size");

                    b.HasKey("Id");

                    b.ToTable("blobs", "movie");
                });

            modelBuilder.Entity("Films.Data.Entities.MovieEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("movie_id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_author_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_description");

                    b.Property<int[]>("Genre")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("movie_genre");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_image_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_name");

                    b.Property<string>("TrailerHref")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trailer_href");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("movie_type");

                    b.Property<bool>("Viewed")
                        .HasColumnType("boolean")
                        .HasColumnName("movie_viewed");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("movie_year");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("movies", "movie");
                });

            modelBuilder.Entity("Films.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_fullname");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_mail");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_nickname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_password");

                    b.HasKey("Id");

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.HasIndex("NickName")
                        .IsUnique();

                    b.HasIndex("NickName", "Mail");

                    b.ToTable("users", "movie");
                });

            modelBuilder.Entity("Films.Data.Entities.ViewedEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("viewed_user_id");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnName("viewed_movie_id");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("viewed", "movie");
                });

            modelBuilder.Entity("Films.Data.Entities.MovieEntity", b =>
                {
                    b.HasOne("Films.Data.Entities.AuthorEntity", "Author")
                        .WithMany("Movies")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Films.Data.Entities.BlobEntity", "Image")
                        .WithOne()
                        .HasForeignKey("Films.Data.Entities.MovieEntity", "ImageId");

                    b.Navigation("Author");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Films.Data.Entities.ViewedEntity", b =>
                {
                    b.HasOne("Films.Data.Entities.MovieEntity", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Films.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Films.Data.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
